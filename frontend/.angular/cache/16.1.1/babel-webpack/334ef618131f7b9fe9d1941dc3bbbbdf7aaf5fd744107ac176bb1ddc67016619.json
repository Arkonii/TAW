{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let HomeComponent = class HomeComponent {\n  constructor(formBuilder, http) {\n    this.formBuilder = formBuilder;\n    this.http = http;\n    this.messages = [];\n    this.isAuthenticated = false;\n    this.username = 'John Doe'; // Nazwa zalogowanego użytkownika\n    this.messageForm = this.formBuilder.group({\n      content: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.isAuthenticated = this.checkAuthentication();\n    if (this.isAuthenticated) {\n      this.fetchMessages();\n    }\n  }\n  checkAuthentication() {\n    const token = localStorage.getItem('token'); // Pobierz token z localStorage\n    if (token) {\n      // Sprawdź, czy token jest ważny (możesz wykonać dodatkowe sprawdzenia, np. sprawdzić jego ważność lub poprawność)\n      return true; // Użytkownik jest zalogowany\n    }\n\n    return false; // Użytkownik nie jest zalogowany\n  }\n\n  fetchMessages() {\n    // Pobierz wiadomości z serwera i przypisz do tablicy messages\n    this.http.get('http://localhost:3000/api/messages').subscribe(response => {\n      this.messages = response;\n    }, error => {\n      console.log('Błąd podczas pobierania wiadomości:', error);\n    });\n  }\n  submitMessage() {\n    if (this.messageForm.invalid) {\n      return;\n    }\n    const content = this.messageForm.controls['content'].value;\n    // Wysłanie wiadomości do serwera\n    this.http.post('http://localhost:3000/api/messages', {\n      username: this.username,\n      content\n    }).subscribe(response => {\n      console.log('Wiadomość wysłana');\n      this.messageForm.reset();\n      this.fetchMessages(); // Odświeżenie wiadomości po wysłaniu\n    }, error => {\n      console.log('Błąd podczas wysyłania wiadomości:', error);\n    });\n  }\n};\nHomeComponent = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})], HomeComponent);","map":{"version":3,"names":["Component","Validators","HomeComponent","constructor","formBuilder","http","messages","isAuthenticated","username","messageForm","group","content","required","ngOnInit","checkAuthentication","fetchMessages","token","localStorage","getItem","get","subscribe","response","error","console","log","submitMessage","invalid","controls","value","post","reset","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Arcio\\Desktop\\Nowy folder\\VI semestr\\Technologie aplikacji webowych\\App\\untitled\\frontend\\src\\app\\home\\home.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\n\ninterface Message {\n  username: string;\n  content: string;\n}\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n  username: string;\n  messageForm: FormGroup;\n  messages: Message[] = [];\n  isAuthenticated: boolean = false;\n\n  constructor(private formBuilder: FormBuilder, private http: HttpClient) {\n    this.username = 'John Doe'; // Nazwa zalogowanego użytkownika\n    this.messageForm = this.formBuilder.group({\n      content: ['', Validators.required]\n    });\n  }\n\n  ngOnInit() {\n    this.isAuthenticated = this.checkAuthentication();\n    if (this.isAuthenticated) {\n      this.fetchMessages();\n    }\n  }\n\n  checkAuthentication(): boolean {\n    const token = localStorage.getItem('token'); // Pobierz token z localStorage\n\n    if (token) {\n      // Sprawdź, czy token jest ważny (możesz wykonać dodatkowe sprawdzenia, np. sprawdzić jego ważność lub poprawność)\n\n      return true; // Użytkownik jest zalogowany\n    }\n\n    return false; // Użytkownik nie jest zalogowany\n  }\n\n  fetchMessages() {\n    // Pobierz wiadomości z serwera i przypisz do tablicy messages\n    this.http.get<Message[]>('http://localhost:3000/api/messages')\n      .subscribe(\n        response => {\n          this.messages = response;\n        },\n        error => {\n          console.log('Błąd podczas pobierania wiadomości:', error);\n        }\n      );\n  }\n\n  submitMessage() {\n    if (this.messageForm.invalid) {\n      return;\n    }\n\n    const content = this.messageForm.controls['content'].value;\n\n    // Wysłanie wiadomości do serwera\n    this.http.post('http://localhost:3000/api/messages', { username: this.username, content })\n      .subscribe(\n        response => {\n          console.log('Wiadomość wysłana');\n          this.messageForm.reset();\n          this.fetchMessages(); // Odświeżenie wiadomości po wysłaniu\n        },\n        error => {\n          console.log('Błąd podczas wysyłania wiadomości:', error);\n        }\n      );\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAiCC,UAAU,QAAQ,gBAAgB;AAa5D,WAAMC,aAAa,GAAnB,MAAMA,aAAa;EAMxBC,YAAoBC,WAAwB,EAAUC,IAAgB;IAAlD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,IAAI,GAAJA,IAAI;IAH1D,KAAAC,QAAQ,GAAc,EAAE;IACxB,KAAAC,eAAe,GAAY,KAAK;IAG9B,IAAI,CAACC,QAAQ,GAAG,UAAU,CAAC,CAAC;IAC5B,IAAI,CAACC,WAAW,GAAG,IAAI,CAACL,WAAW,CAACM,KAAK,CAAC;MACxCC,OAAO,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACW,QAAQ;KAClC,CAAC;EACJ;EAEAC,QAAQA,CAAA;IACN,IAAI,CAACN,eAAe,GAAG,IAAI,CAACO,mBAAmB,EAAE;IACjD,IAAI,IAAI,CAACP,eAAe,EAAE;MACxB,IAAI,CAACQ,aAAa,EAAE;;EAExB;EAEAD,mBAAmBA,CAAA;IACjB,MAAME,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;IAE7C,IAAIF,KAAK,EAAE;MACT;MAEA,OAAO,IAAI,CAAC,CAAC;;;IAGf,OAAO,KAAK,CAAC,CAAC;EAChB;;EAEAD,aAAaA,CAAA;IACX;IACA,IAAI,CAACV,IAAI,CAACc,GAAG,CAAY,oCAAoC,CAAC,CAC3DC,SAAS,CACRC,QAAQ,IAAG;MACT,IAAI,CAACf,QAAQ,GAAGe,QAAQ;IAC1B,CAAC,EACDC,KAAK,IAAG;MACNC,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEF,KAAK,CAAC;IAC3D,CAAC,CACF;EACL;EAEAG,aAAaA,CAAA;IACX,IAAI,IAAI,CAAChB,WAAW,CAACiB,OAAO,EAAE;MAC5B;;IAGF,MAAMf,OAAO,GAAG,IAAI,CAACF,WAAW,CAACkB,QAAQ,CAAC,SAAS,CAAC,CAACC,KAAK;IAE1D;IACA,IAAI,CAACvB,IAAI,CAACwB,IAAI,CAAC,oCAAoC,EAAE;MAAErB,QAAQ,EAAE,IAAI,CAACA,QAAQ;MAAEG;IAAO,CAAE,CAAC,CACvFS,SAAS,CACRC,QAAQ,IAAG;MACTE,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;MAChC,IAAI,CAACf,WAAW,CAACqB,KAAK,EAAE;MACxB,IAAI,CAACf,aAAa,EAAE,CAAC,CAAC;IACxB,CAAC,EACDO,KAAK,IAAG;MACNC,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEF,KAAK,CAAC;IAC1D,CAAC,CACF;EACL;CACD;AAjEYpB,aAAa,GAAA6B,UAAA,EALzB/B,SAAS,CAAC;EACTgC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,sBAAsB;CACnC,CAAC,C,EACWhC,aAAa,CAiEzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}