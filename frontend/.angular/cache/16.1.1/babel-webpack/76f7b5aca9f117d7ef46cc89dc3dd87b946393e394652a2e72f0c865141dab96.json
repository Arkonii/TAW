{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as shortid from 'shortid'; // Importowanie biblioteki shortid\nexport let HomeComponent = class HomeComponent {\n  constructor(formBuilder, http, router) {\n    this.formBuilder = formBuilder;\n    this.http = http;\n    this.router = router;\n    this.messages = [];\n    this.isAuthenticated = false;\n    this.username = ''; // Nazwa zalogowanego użytkownika\n    this.messageForm = this.formBuilder.group({\n      content: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.isAuthenticated = this.checkAuthentication();\n    if (this.isAuthenticated) {\n      this.fetchMessages();\n    } else {\n      this.router.navigate(['/login']); // Przekierowanie do komponentu logowania\n    }\n  }\n\n  checkAuthentication() {\n    const token = localStorage.getItem('token'); // Pobierz token z localStorage\n    this.username = localStorage.getItem('login') ?? ''; // Pobierz login z localStorage i przypisz do username\n    if (token) {\n      // Sprawdź, czy token jest ważny (możesz wykonać dodatkowe sprawdzenia, np. sprawdzić jego ważność lub poprawność)\n      return true; // Użytkownik jest zalogowany\n    }\n\n    return false; // Użytkownik nie jest zalogowany\n  }\n\n  fetchMessages() {\n    // Pobierz wiadomości z serwera i przypisz do tablicy messages\n    this.http.get('http://localhost:3000/api/messages').subscribe(response => {\n      this.messages = response;\n    }, error => {\n      console.log('Błąd podczas pobierania wiadomości:', error);\n    });\n  }\n  submitMessage() {\n    if (this.messageForm.invalid) {\n      return;\n    }\n    if (!this.isAuthenticated) {\n      this.router.navigate(['/login']); // Przekierowanie do komponentu logowania\n      return;\n    }\n    const content = this.messageForm.controls['content'].value;\n    const token = localStorage.getItem('token'); // Pobierz token z localStorage\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    const messageId = shortid.generate(); // Wygenerowanie unikalnego identyfikatora\n    // Wysłanie wiadomości do serwera\n    this.http.post('http://localhost:3000/api/messages', {\n      id: messageId,\n      username: this.username,\n      content\n    }, {\n      headers,\n      responseType: 'text'\n    }).subscribe(response => {\n      console.log('Wiadomość wysłana');\n      this.messageForm.reset();\n      this.fetchMessages(); // Odświeżenie wiadomości po wysłaniu\n    }, error => {\n      console.log('Błąd podczas wysyłania wiadomości:', error);\n    });\n  }\n  deleteMessage(message) {\n    if (!message.id) {\n      console.log('Nie można usunąć wiadomości - brak identyfikatora');\n      return;\n    }\n    const token = localStorage.getItem('token'); // Pobierz token z localStorage\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    // Usunięcie wiadomości z serwera\n    this.http.delete(`http://localhost:3000/api/messages/${message.id}`, {\n      headers,\n      responseType: 'text'\n    }).subscribe(response => {\n      console.log('Wiadomość usunięta');\n      this.fetchMessages(); // Odświeżenie wiadomości po usunięciu\n    }, error => {\n      console.log('Błąd podczas usuwania wiadomości:', error);\n    });\n  }\n  logout() {\n    localStorage.removeItem('token'); // Usunięcie tokenu z localStorage\n    this.isAuthenticated = false;\n    this.router.navigate(['/login']); // Przekierowanie do komponentu logowania\n  }\n};\n\nHomeComponent = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})], HomeComponent);","map":{"version":3,"names":["Component","Validators","HttpHeaders","shortid","HomeComponent","constructor","formBuilder","http","router","messages","isAuthenticated","username","messageForm","group","content","required","ngOnInit","checkAuthentication","fetchMessages","navigate","token","localStorage","getItem","get","subscribe","response","error","console","log","submitMessage","invalid","controls","value","headers","set","messageId","generate","post","id","responseType","reset","deleteMessage","message","delete","logout","removeItem","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Arcio\\Desktop\\Nowy folder\\VI semestr\\Technologie aplikacji webowych\\App\\untitled\\frontend\\src\\app\\home\\home.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport * as shortid from 'shortid'; // Importowanie biblioteki shortid\n\ninterface Message {\n  id: string; // Dodanie pola id do interfejsu Message\n  username: string;\n  content: string;\n}\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n  username: string;\n  messageForm: FormGroup;\n  messages: Message[] = [];\n  isAuthenticated: boolean = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private http: HttpClient,\n    private router: Router\n  ) {\n    this.username = ''; // Nazwa zalogowanego użytkownika\n    this.messageForm = this.formBuilder.group({\n      content: ['', Validators.required]\n    });\n  }\n\n  ngOnInit() {\n    this.isAuthenticated = this.checkAuthentication();\n    if (this.isAuthenticated) {\n      this.fetchMessages();\n    } else {\n      this.router.navigate(['/login']); // Przekierowanie do komponentu logowania\n    }\n  }\n\n  checkAuthentication(): boolean {\n    const token = localStorage.getItem('token'); // Pobierz token z localStorage\n    this.username = localStorage.getItem('login') ?? ''; // Pobierz login z localStorage i przypisz do username\n\n    if (token) {\n      // Sprawdź, czy token jest ważny (możesz wykonać dodatkowe sprawdzenia, np. sprawdzić jego ważność lub poprawność)\n\n      return true; // Użytkownik jest zalogowany\n    }\n\n    return false; // Użytkownik nie jest zalogowany\n  }\n\n  fetchMessages() {\n    // Pobierz wiadomości z serwera i przypisz do tablicy messages\n    this.http.get<Message[]>('http://localhost:3000/api/messages')\n      .subscribe(\n        response => {\n          this.messages = response;\n        },\n        error => {\n          console.log('Błąd podczas pobierania wiadomości:', error);\n        }\n      );\n  }\n\n  submitMessage() {\n    if (this.messageForm.invalid) {\n      return;\n    }\n\n    if (!this.isAuthenticated) {\n      this.router.navigate(['/login']); // Przekierowanie do komponentu logowania\n      return;\n    }\n\n    const content = this.messageForm.controls['content'].value;\n\n    const token = localStorage.getItem('token'); // Pobierz token z localStorage\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n\n    const messageId = shortid.generate(); // Wygenerowanie unikalnego identyfikatora\n\n    // Wysłanie wiadomości do serwera\n    this.http.post('http://localhost:3000/api/messages', { id: messageId, username: this.username, content }, { headers, responseType: 'text' })\n      .subscribe(\n        response => {\n          console.log('Wiadomość wysłana');\n          this.messageForm.reset();\n          this.fetchMessages(); // Odświeżenie wiadomości po wysłaniu\n        },\n        error => {\n          console.log('Błąd podczas wysyłania wiadomości:', error);\n        }\n      );\n  }\n\n  deleteMessage(message: Message) {\n    if (!message.id) {\n      console.log('Nie można usunąć wiadomości - brak identyfikatora');\n      return;\n    }\n\n    const token = localStorage.getItem('token'); // Pobierz token z localStorage\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n\n    // Usunięcie wiadomości z serwera\n    this.http.delete(`http://localhost:3000/api/messages/${message.id}`, { headers, responseType: 'text' })\n      .subscribe(\n        response => {\n          console.log('Wiadomość usunięta');\n          this.fetchMessages(); // Odświeżenie wiadomości po usunięciu\n        },\n        error => {\n          console.log('Błąd podczas usuwania wiadomości:', error);\n        }\n      );\n  }\n\n\n  logout() {\n    localStorage.removeItem('token'); // Usunięcie tokenu z localStorage\n    this.isAuthenticated = false;\n    this.router.navigate(['/login']); // Przekierowanie do komponentu logowania\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}